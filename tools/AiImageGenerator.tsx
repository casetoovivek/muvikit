import React, { useState } from 'react';
import { GoogleGenAI } from "@google/genai";
import { SpinnerIcon } from '../components/icons';

const AiImageGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState('A photorealistic image of a cat riding a skateboard in a futuristic city');
  const [isLoading, setIsLoading] = useState(false);
  const [imageUrl, setImageUrl] = useState('');
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError('Please enter a prompt to generate an image.');
      return;
    }
    setIsLoading(true);
    setImageUrl('');
    setError('');

    try {
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
      const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
      });

      if (response.generatedImages && response.generatedImages.length > 0) {
        const base64ImageBytes = response.generatedImages[0].image.imageBytes;
        setImageUrl(`data:image/jpeg;base64,${base64ImageBytes}`);
      } else {
        setError('The AI could not generate an image for this prompt. Please try a different one.');
      }
    } catch (err) {
      setError('An error occurred while generating the image. This may be due to a safety policy violation or an API issue. Please try again with a different prompt.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="pb-4 border-b border-gray-200 dark:border-slate-700">
        <h2 className="text-3xl font-bold text-slate-800 dark:text-slate-100">AI Image Generator</h2>
        <p className="mt-1 text-lg text-slate-500 dark:text-slate-400">Describe an image, and let our AI create it for you.</p>
      </div>

      <div className="bg-white p-6 rounded-lg border border-slate-200 space-y-4 dark:bg-slate-800 dark:border-slate-700">
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g., A corgi wearing sunglasses on a beach"
          className="w-full h-24 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[var(--theme-primary)] focus:border-[var(--theme-primary)] resize-none dark:bg-slate-700 dark:border-slate-600 dark:text-white"
          disabled={isLoading}
        />
        <button
          onClick={handleGenerate}
          disabled={isLoading}
          className="px-6 py-3 w-full sm:w-auto bg-[var(--theme-primary)] text-white font-semibold rounded-lg shadow-md hover:opacity-90 disabled:bg-gray-400 transition-colors flex items-center justify-center dark:disabled:bg-slate-600"
        >
          {isLoading ? <><SpinnerIcon className="w-5 h-5 mr-2 animate-spin"/> Generating...</> : 'Generate Image'}
        </button>
      </div>

      {error && <div className="p-4 bg-red-100 text-red-800 border border-red-200 rounded-lg dark:bg-red-900/50 dark:text-red-300 dark:border-red-800">{error}</div>}
      
      <div className="flex justify-center">
        {isLoading && <div className="w-96 h-96 bg-slate-100 rounded-lg flex items-center justify-center dark:bg-slate-800"><SpinnerIcon className="w-12 h-12 text-slate-400 animate-spin"/></div>}
        {imageUrl && (
            <div className="relative group">
                 <img src={imageUrl} alt="Generated by AI" className="w-96 h-96 object-cover rounded-lg shadow-lg" />
                 <a 
                    href={imageUrl} 
                    download={`ai-image-${Date.now()}.jpeg`}
                    className="absolute bottom-4 right-4 bg-white/80 text-black px-4 py-2 rounded-full font-semibold opacity-0 group-hover:opacity-100 transition-opacity backdrop-blur-sm"
                >
                    Download
                </a>
            </div>
        )}
      </div>

    </div>
  );
};

export default AiImageGenerator;